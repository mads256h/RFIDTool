#ifndef TEMPLATES_H
#define TEMPLATES_H

namespace Templates
{
// clang-format off
    const byte Blank[] PROGMEM = {
        // Sector 0
        /* 0  */ 0xD9, 0x4B, 0xDB, 0x6E,  0x27, 0x08, 0x04, 0x00,  0x62, 0x63, 0x64, 0x65,  0x66, 0x67, 0x68, 0x69,
        /* 1  */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 2  */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 3  */ 0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0x07,  0x80, 0x69, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
        // Sector 1
        /* 4  */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 5  */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 6  */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 7  */ 0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0x07,  0x80, 0x69, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
        // Sector 2
        /* 8  */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 9  */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 10 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 11 */ 0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0x07,  0x80, 0x69, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
        // Sector 3
        /* 12 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 13 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 14 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 15 */ 0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0x07,  0x80, 0x69, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
        // Sector 4
        /* 16 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 17 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 18 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 19 */ 0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0x07,  0x80, 0x69, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
        // Sector 5
        /* 20 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 21 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 22 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 23 */ 0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0x07,  0x80, 0x69, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
        // Sector 6
        /* 24 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 25 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 26 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 27 */ 0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0x07,  0x80, 0x69, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
        // Sector 7
        /* 28 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 29 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 30 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 31 */ 0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0x07,  0x80, 0x69, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
        // Sector 8
        /* 32 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 33 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 34 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 35 */ 0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0x07,  0x80, 0x69, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
        // Sector 9
        /* 36 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 37 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 38 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 39 */ 0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0x07,  0x80, 0x69, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
        // Sector 10
        /* 40 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 41 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 42 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 43 */ 0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0x07,  0x80, 0x69, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
        // Sector 11
        /* 44 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 45 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 46 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 47 */ 0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0x07,  0x80, 0x69, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
        // Sector 12
        /* 48 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 49 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 50 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 51 */ 0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0x07,  0x80, 0x69, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
        // Sector 13
        /* 52 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 53 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 54 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 55 */ 0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0x07,  0x80, 0x69, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
        // Sector 14
        /* 56 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 57 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 58 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 59 */ 0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0x07,  0x80, 0x69, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
        // Sector 15
        /* 60 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 61 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 62 */ 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
        /* 63 */ 0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0x07,  0x80, 0x69, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
    };
// clang-format on
} // namespace Templates

enum class Template : byte
{
    Blank,
};

void MoveTemplate(byte *data, const byte *array, const size_t size)
{
    if (size != 16 * 4 * 16)
        return;

    for (size_t i = 0; i < 16 * 4 * 16; i++)
    {
        data[i] = pgm_read_byte(array + i);
    }
}

void ApplyTemplate(byte *data, const Template temp)
{
    switch (temp)
    {
    case Template::Blank:
        MoveTemplate(data, Templates::Blank, sizeof(Templates::Blank));
        break;

    default:
        break;
    }
}

#endif